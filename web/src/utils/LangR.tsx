import { useState, useEffect } from "react";
import { fetchNui } from "./fetchNui";
import { useNuiEvent } from "../hooks/useNuiEvent";

interface LangData {
    [key: string]: string;
}

const defaultLangData: LangData = {
    "GarageName": "Garage Name",
    "GarageCreateSpan": "Unique name per garage",
    "GarageJob": "Job",
    "GarageJobSpan": "If you don't write anything it will be for everybody.",
    "GarageType": "Garage Type",
    "GarageTypeSpan": "Type of garage, 2 options garage or impound",
    "GarageType1": "Garage",
    "GarageType2": "Impound",
    "GarageType3": "Custom",
    "GarageImpound": "Price impound",
    "GarageImpoundSpan": "Set a default price for vehicle recovery from this impound.",
    "GarageSociety": "Society",
    "GarageSocietySpan": "Name of society to which the funds raised will go",
    "GarageActionType": "Action zone Type",
    "GarageActionTypeSpan": "Target/Textui/Radial Menu.",
    "GarageActionType1": "Target",
    "GarageActionType2": "Textui",
    "GarageActionType3": "Radial Menu",
    "GarageNPC": "NPC",
    "GarageNPCSpan": "Adds an NPC to the target zone, works with the coordinates of the garage Coord.",
    "GarageVehicleType": "Vehicle type",
    "GarageVehicleTypeSpan": "Select the categories of vehicles that can be parked.",
    "GarageDebug": "Zone Debug",
    "GarageDebugSpan": "Change debug zone",
    "GarageInTocar": "In to car",
    "GarageInTocarSpan": "Set Player on vehicle when spawn",
    "GarageBlip": "Blip",
    "GarageBlipSpan": "Hide / show blip garage",
    "GarageCustomCars": "Custom cars",
    "GarageCustomCarsSpan": "Sets a list of default vehicles, only vehicles spawned from this garage can be saved.",
    "GarageRentACar": "Rent a car",
    "GarageRentACarSpan": "Set price for rent a vehicle",
    "GarageSharedVehicles": "Shared vehicles",
    "GarageSharedVehiclesSpan": "No restriction on Garages Names/Types",
    "GarageDefaultImpound": "Default impound Recovery",
    "GarageDefaultImpoundSpan": "Not finish",
    "GaragePayMethod": "Metodo de pago",
    "GaragePayMethodMoney": "Cash",
    "GaragePayMethodBank": "Bank account",
    "GarageButton1": "Coords",
    "GarageButton2": "Set Zone",
    "GarageButton3": "Spawn Coords",
    "GarageButton4": "Create Garage",
    "GarageButton5": "Teleport",
    "GarageButton6": "Update",
    "GarageButton7": "Delete",
    "GarageButton8": "Garage List",
    "GarageMenu1": "Precio:",
    "GarageMenu2": "Fecha:",
    "GarageMenu3": "Pagar y recuperar",
    "GarageMenu4": "Kilometros",
    "GarageMenu5": "Retirar",
    "GarageMenu6": "Llaves",
    "GarageMenu7": "GPS",
    "GarageMenu9": "Gasolina",
    "GarageMenu10": "Motor",
    "GarageMenu11": "Carroceria",
    "GarageMenu12": "GPS",
    "GarageMenu13 ": "License Plate Prefix",
    "GarageMenu14 ": "Set a prefix of up to 4 characters for vehicles generated by this garage.",
    "GarageMenu15 ": "Vehicle Model",
    "GarageMenu16 ": "Price per Hour",
    "GarageMenu17 ": "Select Grades for the Vehicle",
    "ImpoundOption12": "You will be able to recover this vehicle",
    "private_addon": "",
    "private_addon_client": "",
    "toggle_blip_private": "Private Garages",
    "private_blip1": "Private garages marked on the map",
    "private_blip2": "Private garages unmarked on the map",
    "private_exit": "Exit",
    "private_manage": "Manage",
    "private_manage1": "Grant access",
    "private_manage2": "Remove access",
    "private_manage4": "Manage who has access to the garage",
    "private_manage5": "Storage",
    "private_manage6": "Select garage",
    "private_manage7": "[E] Store Vehicle",
    "private_manage8": "Buy | %s",
    "private_manage9": "### **Price:** %s $  \n ### **Parking Slots:** %s  \n  ![image](%s)",
    "private_manage10": "Payment method",
    "private_manage11": "Select",
    "private_manage12": "Cash",
    "private_manage13": "Bank",
    "private_manage14": "Create",
    "private_manage15": "%s - Slots: %s",
    "private_manage16": "Entrance Door  \n  [E] Set coordinates  \n  [SCROLL] Direction",
    "private_manage17": "Deposit Vehicle  \n  [E] Set coordinates  \n  [SCROLL] Direction",
    "private_manage18": "Private garage management",
    "private_manage19": "Create new private garage",
    "private_manage20": "Name",
    "private_manage21": "Price",
    "private_manage22": "Interior",
    "private_manage23": "Price: %s$ \n Owner: %s \n (Click to mark on the radar)",
    "private_manage24": "For sale: %s",
    "private_manage25": "Only the driver may be in the vehicle...",
    "private_addon_server": "",
    "private_manage_s1": "Private Garage",
    "private_manage_s2": "You cannot own more than %d private garages.",
    "private_manage_s3": "Congratulations, you are now the owner of %s",
    "private_manage_s4": "You don't have enough money.",
    "private_manage_s5": "No available slots found",
    "private_manage_s6": "You cannot store this vehicle here.",
    "private_manage_s7": "You do not have access to remove this vehicle.",
    "private_manage_s8": "You do not have access to this garage.",
    "private_manage_s9": "This name already exists!",
    "private_manage_s10": "The garage was successfully created with the name [ %s ] at a price of [ %s$ ], ID: %s",
    "private_manage_s11": "No Player ID",
    "private_manage_s12": "Te dieron permiso para entrar al garaje %s",
    "private_manage_s13": "Accesor retirado a %s",
    "private_manage_s14": "",
    "private_manage_s15": "",
    "private_ui1": "Slots:",
    "private_ui2": "Comprar garaje",
    "private_ui3": "Owner",
    "private_ui4": "Price",
    "private_ui5": "Location",
    "private_ui6": "Slots",
    "private_ui7": "Occupied Slots",
    "private_ui8": "Garage",
    "private_ui9": "Access",
    "private_ui10": "Vehicles",
    "private_ui11": "Add Access",
    "private_ui12": "Slot",
    "private_ui13": "Name",
    "private_ui14": "Plate",
    "private_ui15": "Options",
    "private_ui16": "Access",
    "private_ui17": "Rename",
    "private_ui18": "Give Key",
    "ui_name1": "Nombre",
    "ui_name2": "Renombrar vehiculo",
    "ui_name3": "Cambiar"
};



const Lang = () => {
    const [lang, setLang] = useState<LangData>(defaultLangData);

    useNuiEvent<LangData>('mGarage:Lang', (data) => {
        setLang(data);
    });

    useEffect(() => {
        fetchNui<LangData>('mGarage:Lang')
            .then(data => {
                setLang(data);
            })
            .catch(error => {
                console.error('Error fetching language data:', error);
            });
    }, []);

    return lang;
};

export default Lang;
